
I2C_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009bc  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000049e  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001730  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000190  00000000  00000000  00001c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "../MCAL/I2C/I2C.h"


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	uint8_t add=21;
	uint8_t c;
	DDRB_R=0xFF;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	87 bb       	out	0x17, r24	; 23
        TWI_SlaveInit(add);
  7a:	85 e1       	ldi	r24, 0x15	; 21
  7c:	0e 94 4e 00 	call	0x9c	; 0x9c <TWI_SlaveInit>

		TWI_SlaveReadMatch();
  80:	0e 94 52 00 	call	0xa4	; 0xa4 <TWI_SlaveReadMatch>

		TWI_SlaveRead(&c);
  84:	ce 01       	movw	r24, r28
  86:	01 96       	adiw	r24, 0x01	; 1
  88:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_SlaveRead>
		PORTB_R=c;
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	88 bb       	out	0x18, r24	; 24
		TWI_SlaveWriteMatch();
  90:	0e 94 6c 00 	call	0xd8	; 0xd8 <TWI_SlaveWriteMatch>
		TWI_SlaveWriteData('C');
  94:	83 e4       	ldi	r24, 0x43	; 67
  96:	0e 94 78 00 	call	0xf0	; 0xf0 <TWI_SlaveWriteData>
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x2e>

0000009c <TWI_SlaveInit>:
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Slave initialization
*************************************************************/
enuErrorStatus_t TWI_SlaveInit(uint8_t addr)
{
	TWAR_R = (addr<<1);
  9c:	88 0f       	add	r24, r24
  9e:	82 b9       	out	0x02, r24	; 2
	
	return E_OK;
}
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	08 95       	ret

000000a4 <TWI_SlaveReadMatch>:
{
	while((TWSR_R&0xF8) != 0x60) //loop till the correct ack received
	{

		/*Get ack */
		TWCR_R=(1<<TWEA_B)|(1<<TWEN_B)|(1<<TWINT_B);
  a4:	94 ec       	ldi	r25, 0xC4	; 196
* Description     : Slave match the read by looping till an ack 
					is received
*************************************************************/
enuErrorStatus_t TWI_SlaveReadMatch(void)
{
	while((TWSR_R&0xF8) != 0x60) //loop till the correct ack received
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <TWI_SlaveReadMatch+0xc>
	{

		/*Get ack */
		TWCR_R=(1<<TWEA_B)|(1<<TWEN_B)|(1<<TWINT_B);
  a8:	96 bf       	out	0x36, r25	; 54
		while(!GET_BIT(TWCR_R,TWINT_B));
  aa:	06 b6       	in	r0, 0x36	; 54
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <TWI_SlaveReadMatch+0x6>
* Description     : Slave match the read by looping till an ack 
					is received
*************************************************************/
enuErrorStatus_t TWI_SlaveReadMatch(void)
{
	while((TWSR_R&0xF8) != 0x60) //loop till the correct ack received
  b0:	81 b1       	in	r24, 0x01	; 1
  b2:	88 7f       	andi	r24, 0xF8	; 248
  b4:	80 36       	cpi	r24, 0x60	; 96
  b6:	c1 f7       	brne	.-16     	; 0xa8 <TWI_SlaveReadMatch+0x4>
		/*Get ack */
		TWCR_R=(1<<TWEA_B)|(1<<TWEN_B)|(1<<TWINT_B);
		while(!GET_BIT(TWCR_R,TWINT_B));
	}
	return E_OK;
}
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	08 95       	ret

000000bc <TWI_SlaveRead>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Slave reads the data
*************************************************************/
enuErrorStatus_t TWI_SlaveRead(uint8_t* pu8data)
{
  bc:	fc 01       	movw	r30, r24
	TWCR_R=(1<<TWINT_B)|(1<<TWEA_B)|(1<<TWEN_B);
  be:	84 ec       	ldi	r24, 0xC4	; 196
  c0:	86 bf       	out	0x36, r24	; 54
	while(!GET_BIT(TWCR_R,TWINT_B));
  c2:	06 b6       	in	r0, 0x36	; 54
  c4:	07 fe       	sbrs	r0, 7
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <TWI_SlaveRead+0x6>
	while((TWSR_R&0xF8) != 0x80);
  c8:	91 b1       	in	r25, 0x01	; 1
  ca:	98 7f       	andi	r25, 0xF8	; 248
  cc:	90 38       	cpi	r25, 0x80	; 128
  ce:	e1 f7       	brne	.-8      	; 0xc8 <TWI_SlaveRead+0xc>
	*pu8data=TWDR_R;
  d0:	83 b1       	in	r24, 0x03	; 3
  d2:	80 83       	st	Z, r24
	return E_OK;
}
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret

000000d8 <TWI_SlaveWriteMatch>:
enuErrorStatus_t TWI_SlaveWriteMatch(void)
{
	while((TWSR_R&0xF8) != 0xA8) //loop till the correct ack received
	{
		/*Get ack */
		TWCR_R=(1<<TWEA_B)|(1<<TWEN_B)|(1<<TWINT_B);
  d8:	94 ec       	ldi	r25, 0xC4	; 196
* Description     : Slave match the write by looping till an ack 
					is received
*************************************************************/
enuErrorStatus_t TWI_SlaveWriteMatch(void)
{
	while((TWSR_R&0xF8) != 0xA8) //loop till the correct ack received
  da:	04 c0       	rjmp	.+8      	; 0xe4 <TWI_SlaveWriteMatch+0xc>
	{
		/*Get ack */
		TWCR_R=(1<<TWEA_B)|(1<<TWEN_B)|(1<<TWINT_B);
  dc:	96 bf       	out	0x36, r25	; 54
		while(!GET_BIT(TWCR_R,TWINT_B));
  de:	06 b6       	in	r0, 0x36	; 54
  e0:	07 fe       	sbrs	r0, 7
  e2:	fd cf       	rjmp	.-6      	; 0xde <TWI_SlaveWriteMatch+0x6>
* Description     : Slave match the write by looping till an ack 
					is received
*************************************************************/
enuErrorStatus_t TWI_SlaveWriteMatch(void)
{
	while((TWSR_R&0xF8) != 0xA8) //loop till the correct ack received
  e4:	81 b1       	in	r24, 0x01	; 1
  e6:	88 7f       	andi	r24, 0xF8	; 248
  e8:	88 3a       	cpi	r24, 0xA8	; 168
  ea:	c1 f7       	brne	.-16     	; 0xdc <TWI_SlaveWriteMatch+0x4>
		/*Get ack */
		TWCR_R=(1<<TWEA_B)|(1<<TWEN_B)|(1<<TWINT_B);
		while(!GET_BIT(TWCR_R,TWINT_B));
	}
	return E_OK;
}
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	08 95       	ret

000000f0 <TWI_SlaveWriteData>:
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Slave writes the data
*************************************************************/
enuErrorStatus_t TWI_SlaveWriteData(uint8_t data)
{
	TWDR_R = data;
  f0:	83 b9       	out	0x03, r24	; 3
	TWCR_R = (1<<TWINT_B)|(1<<TWEN_B);
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	86 bf       	out	0x36, r24	; 54
	while(!GET_BIT(TWCR_R,TWINT_B));
  f6:	06 b6       	in	r0, 0x36	; 54
  f8:	07 fe       	sbrs	r0, 7
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <TWI_SlaveWriteData+0x6>
	while((TWSR_R&0xF8) != 0xC0);
  fc:	81 b1       	in	r24, 0x01	; 1
  fe:	88 7f       	andi	r24, 0xF8	; 248
 100:	80 3c       	cpi	r24, 0xC0	; 192
 102:	e1 f7       	brne	.-8      	; 0xfc <TWI_SlaveWriteData+0xc>
	return E_OK;
}
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
